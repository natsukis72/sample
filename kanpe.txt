前回のおさらい
ファイルの変更履歴を管理するための「バージョン管理システム」の一種で、その中でも「分散型」とよばれ、
ローカル環境（自分のパソコンなど）に、全ての変更履歴を含む完全なリポジトリの複製が作成されるため、オフラインの状態でも自由にファイルの編集やその反映が可能

対義語として「集中型バージョン管理システム」というのがあります。
にゃんこではスクラム初期はSVNを使っててコレがそれに当たる
これは中央のサーバーに対して直接変更をかけに行くので作業中は常にネットワークに接続しておく必要がある

Git移行してみて
感想・・・
ネットにあふれているようなありきたりなものではあるが・・・


説明して面白い部分ではないのでサラッと流す
Git導入の事例はネットにたくさんあるのでそれらを参考にして、にゃんこで運用していくにあたってのルールを決定した
図にあるのはブランチ運用ルール
先程も説明したとおり、ブランチが簡単に作成できる≒乱立するってことでもあるのでしっかりとルールを決めて運用している。

一番オーソドックスな形を採用しているので、今のところ問題は起きていない。
その他の細かいルールはコンフル上にまとめてある


前回あまり説明ができていなかった、GitとGitHubの関係
自分自身調べが足らず、混同していた部分があった



GitHubとは・・・
Gitによって集団で開発をする際に使える、便利な機能を提供してくれるホスティングサービス
Gitのホスティングサービスはたくさんある

この「便利な機能」について紹介する




GitLabはGitBucketや後述するRedmine、Tracなどと比べてリポジトリ管理関連機能が最も充実しており、リポジトリの作成やユーザーの管理、フォークやプルリクエストといった処理をすべてWebブラウザからの操作で実行できる


GitLab
BitBucket-アトラシアン製品

課金の仕方とかがそれぞれ大きく違う



「Issue」は、日本語訳すると「問題」や「課題」といった意味
GitHubのIssues機能もプロジェクトやソースコードの課題を管理するための機能


Slack←コミット・プッシュなどのアクションに対して、アカウントやチャンネルにアラートを自動で飛ばせる
 ビルドの自動化
Jenkinsの最もポピュラーな使い方はビルドの自動化です。
バージョン管理システム（SVNやGit）と連携し、ソースがコミットされたタイミングでビルドが実行されます。
デプロイの自動化
Jenkinsはビルドしたプログラムを開発サーバや本番サーバにデプロイすることができます。
 テストの自動化
JenkinsはJUnit等のテストフレームワークを使ったテストができます。
 静的コード解析の自動化
JenkinsはCheckstyle、FindBugs、Step Counter等の静的コード解析ができます。
