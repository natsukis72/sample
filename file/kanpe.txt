
■４
前回のおさらい
ファイルの変更履歴を管理するための「バージョン管理システム」の一種。その中でも「分散型」とよばれいて、
ローカル環境（自分のパソコンなど）に、全ての変更履歴を含む完全なリポジトリの複製が作成されるため、
オフラインの状態でも自由にファイルの編集やその反映が可能

対義語として「集中型バージョン管理システム」
にゃんこではスクラム初期はSVNを使っててコレがそれに当たる
これは中央のサーバーに対して直接変更をかけに行くので作業中は常にネットワークに接続しておく必要がある


■５
Git移行してみて
感想・・・
ネットにあふれているようなありきたりなものではあるが・・・

ボタン一つでブランチ作成ができた！
マージも自動でやってくれて楽！

実際のところ、SVNでの作業時・・・
マージやブランチ作成は仕様管理者だったりが担当していて、あまり日常的にはやっていないかった。
ただ、マージは大変そうだった・・・。

■６　にゃんこチームでのGit
説明して面白い部分ではないのでサラッと流す
Git導入の事例はネットにたくさんあるのでそれらを参考にして、にゃんこで運用していくにあたってのルールを決定した
図にあるのはブランチ運用ルール
先程も説明したとおり、ブランチが簡単に作成できる≒乱立するってことでもあるので
管理・運用方法しっかりと決めている。

一番オーソドックスな形を採用しているので、特筆してお伝えすることもない・・・
その他の細かいルールはコンフル上にまとめてある

■７　GitとGitHub
前回あまり説明ができていなかった、GitとGitHubの関係
自分自身調べが足らず、混同していた部分があった
今回第二回を開くにあたって改めて調べ直したという経緯があり。。。


■８
GitHubとは・・・
Gitによって集団で開発をする際に使える、便利な機能を提供してくれるホスティングサービス
Gitのホスティングサービスはたくさんある

■９（参考）
GitLabはリポジトリ管理関連機能が最も充実しており、リポジトリの作成やユーザーの管理、
フォークやプルリクエストといった処理をすべてWebブラウザからの操作で実行できる

GitLab
BitBucket-アトラシアン製品

課金の仕方とかがそれぞれ大きく違う


■１０（便利な機能って）
「Issue」は、日本語訳すると「問題」や「課題」といった意味
GitHubのIssues機能もプロジェクトやソースコードの課題を管理するための機能

■１３（他サービスとの連携）
Slack←コミット・プッシュなどのアクションに対して、アカウントやチャンネルにアラートを自動で飛ばせる
 ビルドの自動化
Jenkinsの最もポピュラーな使い方はビルドの自動化です。
バージョン管理システム（SVNやGit）と連携し、ソースがコミットされたタイミングでビルドが実行されます。
デプロイの自動化
Jenkinsはビルドしたプログラムを開発サーバや本番サーバにデプロイすることができます。
 テストの自動化
JenkinsはJUnit等のテストフレームワークを使ったテストができます。
 静的コード解析の自動化
JenkinsはCheckstyle、FindBugs、Step Counter等の静的コード解析ができます。

■デモ